{"version":3,"file":"websurface.umd.js","sources":["../src/constants.ts","../src/DOMContext.ts","../src/DOMElement.ts","../src/websurface.ts"],"sourcesContent":["/**\r\n * Useful for projecting to scale high-resolution DOM elements\r\n */\r\nexport const cssFactor = 100;\r\n","import { PerspectiveCamera, Quaternion, Scene, Vector3 } from 'three';\r\nimport { CSS3DRenderer } from 'three/examples/jsm/renderers/CSS3DRenderer';\r\nimport { cssFactor } from './constants';\r\n\r\nexport class DOMContext {\r\n  /**\r\n   * Whether to enable the `DOMContext` and its projection. Default is `true.`\r\n   */\r\n  enabled: boolean;\r\n  /**\r\n   * Renderer used for rendering the DOM\r\n   */\r\n  cssRenderer: CSS3DRenderer;\r\n  /**\r\n   * Target DOM element to render to\r\n   */\r\n  domElement: HTMLElement;\r\n  /**\r\n   * Camera used for CSS projection\r\n   */\r\n  cssCamera: PerspectiveCamera;\r\n  /**\r\n   * Parent camera used to sync with WebGL\r\n   */\r\n  camera: PerspectiveCamera;\r\n  //@custom\r\n  websurfaceEntity: any;\r\n  /**\r\n   * CSS scene used to contain CSS projections\r\n   */\r\n  cssScene: Scene;\r\n\r\n  /**\r\n   * DOM context instance\r\n   * @param camera  A perspective camera instance to draw from\r\n   */\r\n  constructor(camera: PerspectiveCamera, websurfaceEntity: any) {\r\n    //@custom\r\n    this.websurfaceEntity = websurfaceEntity;\r\n\r\n    // Set default settings\r\n    this.enabled = true;\r\n\r\n    // Init renderer\r\n    this.cssRenderer = new CSS3DRenderer();\r\n    this.domElement = this.cssRenderer.domElement;\r\n\r\n    //@custom click detection for leaving websurface\r\n    const div = document.createElement('div');\r\n    div.style.position = 'fixed';\r\n    div.style.top = '0';\r\n    div.style.width = '100%';\r\n    div.style.height = '100%';\r\n    div.style.zIndex = '-1';\r\n    this.domElement.appendChild(div);\r\n\r\n    div.addEventListener('click', function (event) {\r\n      websurfaceEntity.sceneEl.style.zIndex = 2;\r\n    });\r\n\r\n    // Init camera\r\n    this.cssCamera = new PerspectiveCamera(camera.fov, camera.aspect, camera.near * cssFactor, camera.far * cssFactor);\r\n    this.camera = camera;\r\n\r\n    // Init scene\r\n    this.cssScene = new Scene();\r\n\r\n    // Bind update\r\n    this.update = this.update.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Resizes the DOM context's renderer and camera\r\n   * @param width Target width\r\n   * @param height Target height\r\n   */\r\n  setSize(width: number, height: number) {\r\n    this.cssRenderer.setSize(width, height);\r\n    this.cssCamera.aspect = width / height;\r\n    this.cssCamera.updateProjectionMatrix();\r\n  }\r\n\r\n  /**\r\n   * Updates the DOM context's renderer and camera states\r\n   */\r\n  update() {\r\n    //@custom\r\n    let camPos = new Vector3();\r\n    let camQuat = new Quaternion();\r\n    let camScale = new Vector3();\r\n    this.camera.matrixWorld.decompose(camPos, camQuat, camScale);\r\n    // Sync CSS camera with WebGL camera\r\n    this.cssCamera.quaternion.copy(camQuat);\r\n    this.cssCamera.position.copy(camPos).multiplyScalar(cssFactor);\r\n\r\n    // Render projection\r\n    this.cssRenderer.render(this.cssScene, this.cssCamera);\r\n  }\r\n}\r\n","import { Mesh, PlaneGeometry, MeshBasicMaterial, NoBlending, DoubleSide, Vector3, Box3, Color } from 'three';\r\nimport { CSS3DObject } from 'three/examples/jsm/renderers/CSS3DRenderer';\r\nimport { DOMContext } from './DOMContext';\r\nimport { cssFactor } from './constants';\r\n\r\nexport class DOMElement extends Mesh {\r\n  /**\r\n   * The active `DOMContext` to draw on\r\n   */\r\n  context: DOMContext;\r\n  /**\r\n   * The projected 2D DOM element\r\n   */\r\n  domElement: HTMLElement;\r\n  /**\r\n   * DOM element aspect artio\r\n   */\r\n  aspectRatio: number;\r\n  /**\r\n   * DOM element width\r\n   */\r\n  elementWidth: number;\r\n  /**\r\n   * DOM element height\r\n   */\r\n  elementHeight: number;\r\n  /**\r\n   * 3D projection width\r\n   */\r\n  width: number;\r\n  /**\r\n   * 3D projection height\r\n   */\r\n  height: number;\r\n  /**\r\n   * The projecting 3D object\r\n   */\r\n  cssObject: CSS3DObject;\r\n  //@custom\r\n  cssObjectInitialScale: Vector3;\r\n  oldScaleFactor: Vector3;\r\n  /**\r\n   * Internal `Vector3` for WebGL size/scale calculations\r\n   */\r\n  size: Vector3;\r\n  /**\r\n   * Internal `Box` used for bounding box calculations\r\n   */\r\n  box: Box3;\r\n\r\n  /**\r\n   * DOM element that is projected into 3D space\r\n   * @param context A DOM context instance to draw on\r\n   * @param domElement A DOM element to project\r\n   * @param options DOM element options\r\n   * @param options.elementWidth DOM element width\r\n   * @param options.width 3D plane width\r\n   * @param options.height 3D plane height\r\n   */\r\n  constructor(\r\n    context: DOMContext,\r\n    domElement: HTMLElement,\r\n    width: number,\r\n    height: number,\r\n    { elementWidth = 1280 } = {}\r\n  ) {\r\n    // Create portal mesh\r\n    const geometry = new PlaneGeometry(width, height);\r\n    const material = new MeshBasicMaterial({\r\n      opacity: 0,\r\n      blending: NoBlending,\r\n      side: DoubleSide,\r\n      color: new Color(0, 0, 0),\r\n    });\r\n    super(geometry, material);\r\n\r\n    // Expose params\r\n    this.context = context;\r\n    this.domElement = domElement;\r\n    this.aspectRatio = height / width;\r\n    this.elementWidth = elementWidth;\r\n    this.elementHeight = this.elementWidth * this.aspectRatio;\r\n    this.width = width;\r\n    this.height = height;\r\n\r\n    // Set initial size\r\n    this.resizeElement();\r\n\r\n    // Init 3D DOM\r\n    this.cssObject = new CSS3DObject(this.domElement);\r\n    this.cssObject.scale.multiplyScalar(cssFactor / (this.elementWidth / this.width));\r\n    //@custom\r\n    this.cssObjectInitialScale = this.cssObject.scale;\r\n\r\n    // Init helpers\r\n    this.size = new Vector3();\r\n    this.box = new Box3();\r\n\r\n    // Init events\r\n    this.addEventListener('added', this.handleAdded);\r\n    this.addEventListener('removed', this.handleRemoved);\r\n\r\n    // Bind update\r\n    this.update = this.update.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Adds the current cssObject to the scene\r\n   */\r\n  handleAdded() {\r\n    this.context.cssScene.add(this.cssObject);\r\n  }\r\n\r\n  /**\r\n   * Removes the current cssObject from the scene\r\n   */\r\n  handleRemoved() {\r\n    this.context.cssScene.remove(this.cssObject);\r\n  }\r\n\r\n  /**\r\n   * Resizes DOM element to sync with projection\r\n   */\r\n  resizeElement() {\r\n    this.domElement.style.width = `${this.elementWidth}px`;\r\n    this.domElement.style.height = `${this.elementHeight}px`;\r\n  }\r\n\r\n  /**\r\n   * Updates the projected DOM element\r\n   * @param domElement A DOM element to project\r\n   */\r\n  setElement(domElement: HTMLElement) {\r\n    // Cleanup previous element\r\n    if (this.domElement.parentNode) {\r\n      this.domElement.parentNode.removeChild(this.domElement);\r\n    }\r\n\r\n    // Set new element\r\n    this.domElement = domElement;\r\n    this.cssObject.element = domElement;\r\n\r\n    // Reset element size\r\n    this.resizeElement();\r\n  }\r\n\r\n  /**\r\n   * Updates the DOM element and its projection states\r\n   */\r\n  //@custom\r\n  update(obj: any) {\r\n    // Sync CSS properties with WebGL mesh\r\n    this.cssObject.quaternion.copy(obj.quaternion);\r\n    this.cssObject.position.copy(obj.position).multiplyScalar(cssFactor);\r\n\r\n    // Calculate CSS scale factor\r\n    this.box.setFromObject(this).getSize(this.size);\r\n    const scaleFactor = obj.scale;\r\n\r\n    // Sync CSS scale with WebGL projection\r\n    if (this.oldScaleFactor != scaleFactor) {\r\n      this.oldScaleFactor = scaleFactor;\r\n      this.cssObject.scale.set(\r\n        this.cssObjectInitialScale.x,\r\n        this.cssObjectInitialScale.y,\r\n        this.cssObjectInitialScale.z\r\n      );\r\n      this.cssObject.scale.multiply(scaleFactor);\r\n    }\r\n\r\n    this.cssObject.visible = obj.visible;\r\n  }\r\n\r\n  /**\r\n   * Disposes WebGL and DOM elements\r\n   */\r\n  dispose() {\r\n    // Cleanup events\r\n    this.removeEventListener('added', this.handleAdded);\r\n    this.removeEventListener('removed', this.handleRemoved);\r\n\r\n    // Cleanup DOM\r\n    this.domElement.remove();\r\n\r\n    // Cleanup WebGL\r\n    this.geometry.dispose();\r\n    (this.material as MeshBasicMaterial).dispose();\r\n  }\r\n}\r\n","//uses a modified version of https://github.com/CodyJasonBennett/three-dom-elements\r\nimport { DOMContext } from './DOMContext';\r\nimport { DOMElement } from './DOMElement';\r\n\r\nexport const component = AFRAME.registerComponent('websurface', {\r\n  schema: {\r\n    url: { default: 'https://aframe.io' },\r\n    width: { default: 1 },\r\n    height: { default: 0.75 },\r\n    frameSkips: { default: 1 },\r\n    autoSceneStyling: { default: true },\r\n  },\r\n\r\n  init: function () {\r\n    const el = this.el;\r\n    const data = this.data;\r\n\r\n    if (data.autoSceneStyling == true) {\r\n      el.sceneEl.style.position = 'absolute';\r\n    }\r\n\r\n    data.mouseHasLeftScreen = true;\r\n\r\n    //geometry for click detection\r\n    el.setAttribute('geometry', `primitive:plane; width:${data.width}; height:${data.height};`);\r\n\r\n    el.addEventListener('click', function () {\r\n      if (data.mouseHasLeftScreen == false) return;\r\n\r\n      document.exitPointerLock();\r\n      el.sceneEl.style.zIndex = -2;\r\n\r\n      data.mouseHasLeftScreen = false;\r\n    });\r\n\r\n    el.addEventListener('mouseleave', function () {\r\n      data.mouseHasLeftScreen = true;\r\n    });\r\n\r\n    el.sceneEl.addEventListener('cam-loaded', function () {\r\n      const iframe = document.createElement('iframe');\r\n      iframe.setAttribute('src', data.url);\r\n      iframe.style.border = 'none';\r\n\r\n      const camera = el.sceneEl.camera;\r\n      const context = new DOMContext(camera, el);\r\n      context.setSize(window.innerWidth, window.innerHeight);\r\n      document.body.appendChild(context.domElement);\r\n\r\n      const element = new DOMElement(context, iframe, data.width, data.height);\r\n      el.object3D.add(element);\r\n\r\n      data.context = context;\r\n      data.element = element;\r\n\r\n      window.addEventListener('resize', () => {\r\n        context.setSize(window.innerWidth, window.innerHeight);\r\n      });\r\n    });\r\n\r\n    data.frames = 0;\r\n    data.isCamLoaded = false;\r\n  },\r\n\r\n  tick: function () {\r\n    const el = this.el;\r\n    const data = this.data;\r\n\r\n    if (data.isCamLoaded == false) {\r\n      const camera = el.sceneEl.camera;\r\n      if (camera) {\r\n        this.el.emit('cam-loaded');\r\n        data.isCamLoaded = true;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const context = data.context;\r\n    const element = data.element;\r\n\r\n    if (data.frames % data.frameSkips == 0) {\r\n      if (context) {\r\n        context.update();\r\n      }\r\n      if (element) {\r\n        element.update(el.object3D);\r\n      }\r\n    }\r\n\r\n    data.frames++;\r\n  },\r\n});\r\n"],"names":["cssFactor","DOMContext","camera","websurfaceEntity","this","enabled","cssRenderer","CSS3DRenderer","domElement","div","document","createElement","style","position","top","width","height","zIndex","appendChild","addEventListener","event","sceneEl","cssCamera","PerspectiveCamera","fov","aspect","near","far","cssScene","Scene","update","bind","setSize","updateProjectionMatrix","camPos","Vector3","camQuat","Quaternion","camScale","matrixWorld","decompose","quaternion","copy","multiplyScalar","render","DOMElement","context","elementWidth","geometry","PlaneGeometry","material","MeshBasicMaterial","opacity","blending","NoBlending","side","DoubleSide","color","Color","_this","aspectRatio","elementHeight","resizeElement","cssObject","CSS3DObject","scale","cssObjectInitialScale","size","box","Box3","handleAdded","handleRemoved","add","remove","setElement","parentNode","removeChild","element","obj","setFromObject","getSize","scaleFactor","oldScaleFactor","set","x","y","z","multiply","visible","dispose","removeEventListener","Mesh","component","AFRAME","registerComponent","schema","url","default","frameSkips","autoSceneStyling","init","el","data","mouseHasLeftScreen","setAttribute","exitPointerLock","iframe","border","window","innerWidth","innerHeight","body","object3D","frames","isCamLoaded","tick","emit"],"mappings":"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"}