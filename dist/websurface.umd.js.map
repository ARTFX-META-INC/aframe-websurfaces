{"version":3,"file":"websurface.umd.js","sources":["../src/constants.js","../src/DOMContext.js","../src/DOMElement.js","../src/websurface.js"],"sourcesContent":["/**\r\n * Useful for projecting to scale high-resolution DOM elements\r\n */\r\nexport const cssFactor = 100;\r\n","import { PerspectiveCamera, Quaternion, Scene, Vector3 } from 'three';\r\nimport { CSS3DRenderer } from 'three/examples/jsm/renderers/CSS3DRenderer';\r\nimport { cssFactor } from './constants';\r\nexport class DOMContext {\r\n    /**\r\n     * DOM context instance\r\n     * @param camera  A perspective camera instance to draw from\r\n     */\r\n    constructor(camera, websurfaceEntity) {\r\n        //@custom\r\n        this.websurfaceEntity = websurfaceEntity;\r\n        // Set default settings\r\n        this.enabled = true;\r\n        // Init renderer\r\n        this.cssRenderer = new CSS3DRenderer();\r\n        this.domElement = this.cssRenderer.domElement;\r\n        // Init camera\r\n        this.cssCamera = new PerspectiveCamera(camera.fov, camera.aspect, camera.near * cssFactor, camera.far * cssFactor);\r\n        this.camera = camera;\r\n        // Init scene\r\n        this.cssScene = new Scene();\r\n        // Bind update\r\n        this.update = this.update.bind(this);\r\n    }\r\n    /**\r\n     * Resizes the DOM context's renderer and camera\r\n     * @param width Target width\r\n     * @param height Target height\r\n     */\r\n    setSize(width, height) {\r\n        this.cssRenderer.setSize(width, height);\r\n        this.cssCamera.aspect = width / height;\r\n        this.cssCamera.updateProjectionMatrix();\r\n    }\r\n    /**\r\n     * Updates the DOM context's renderer and camera states\r\n     */\r\n    update() {\r\n        //@custom\r\n        let camPos = new Vector3();\r\n        let camQuat = new Quaternion();\r\n        let _camScale = new Vector3();\r\n        this.camera.matrixWorld.decompose(camPos, camQuat, _camScale);\r\n        // Sync CSS camera with WebGL camera\r\n        this.cssCamera.quaternion.copy(camQuat);\r\n        this.cssCamera.position.copy(camPos).multiplyScalar(cssFactor);\r\n        // Render projection\r\n        this.cssRenderer.render(this.cssScene, this.cssCamera);\r\n    }\r\n}\r\n","import { Mesh, PlaneGeometry, MeshBasicMaterial, NoBlending, DoubleSide, Vector3, Box3, Color } from 'three';\r\nimport { CSS3DObject } from 'three/examples/jsm/renderers/CSS3DRenderer';\r\nimport { cssFactor } from './constants';\r\nexport class DOMElement extends Mesh {\r\n    /**\r\n     * DOM element that is projected into 3D space\r\n     * @param context A DOM context instance to draw on\r\n     * @param domElement A DOM element to project\r\n     * @param options DOM element options\r\n     * @param options.elementWidth DOM element width\r\n     * @param options.width 3D plane width\r\n     * @param options.height 3D plane height\r\n     */\r\n    constructor(context, domElement, width, height, { elementWidth = 1280 } = {}) {\r\n        // Create portal mesh\r\n        const geometry = new PlaneGeometry(width, height);\r\n        const material = new MeshBasicMaterial({\r\n            opacity: 0,\r\n            blending: NoBlending,\r\n            side: DoubleSide,\r\n            color: new Color(0, 0, 0),\r\n        });\r\n        super(geometry, material);\r\n        // Expose params\r\n        this.context = context;\r\n        this.domElement = domElement;\r\n        this.aspectRatio = height / width;\r\n        this.elementWidth = elementWidth;\r\n        this.elementHeight = this.elementWidth * this.aspectRatio;\r\n        this.width = width;\r\n        this.height = height;\r\n        // Set initial size\r\n        this.resizeElement();\r\n        // Init 3D DOM\r\n        this.cssObject = new CSS3DObject(this.domElement);\r\n        this.cssObject.scale.multiplyScalar(cssFactor / (this.elementWidth / this.width));\r\n        //@custom\r\n        this.cssObjectInitialScale = this.cssObject.scale;\r\n        // Init helpers\r\n        this.size = new Vector3();\r\n        this.box = new Box3();\r\n        // Init events\r\n        this.addEventListener('added', this.handleAdded);\r\n        this.addEventListener('removed', this.handleRemoved);\r\n        // Bind update\r\n        this.update = this.update.bind(this);\r\n    }\r\n    /**\r\n     * Adds the current cssObject to the scene\r\n     */\r\n    handleAdded() {\r\n        this.context.cssScene.add(this.cssObject);\r\n    }\r\n    /**\r\n     * Removes the current cssObject from the scene\r\n     */\r\n    handleRemoved() {\r\n        this.context.cssScene.remove(this.cssObject);\r\n    }\r\n    /**\r\n     * Resizes DOM element to sync with projection\r\n     */\r\n    resizeElement() {\r\n        this.domElement.style.width = `${this.elementWidth}px`;\r\n        this.domElement.style.height = `${this.elementHeight}px`;\r\n    }\r\n    /**\r\n     * Updates the projected DOM element\r\n     * @param domElement A DOM element to project\r\n     */\r\n    setElement(domElement) {\r\n        // Cleanup previous element\r\n        if (this.domElement.parentNode) {\r\n            this.domElement.parentNode.removeChild(this.domElement);\r\n        }\r\n        // Set new element\r\n        this.domElement = domElement;\r\n        this.cssObject.element = domElement;\r\n        // Reset element size\r\n        this.resizeElement();\r\n    }\r\n    /**\r\n     * Updates the DOM element and its projection states\r\n     */\r\n    //@custom\r\n    update(obj) {\r\n        // Sync CSS properties with WebGL mesh\r\n        this.cssObject.quaternion.copy(obj.quaternion);\r\n        this.cssObject.position.copy(obj.position).multiplyScalar(cssFactor);\r\n        // Calculate CSS scale factor\r\n        this.box.setFromObject(this).getSize(this.size);\r\n        const scaleFactor = obj.scale;\r\n        // Sync CSS scale with WebGL projection\r\n        if (this.oldScaleFactor != scaleFactor) {\r\n            this.oldScaleFactor = scaleFactor;\r\n            this.cssObject.scale.set(this.cssObjectInitialScale.x, this.cssObjectInitialScale.y, this.cssObjectInitialScale.z);\r\n            this.cssObject.scale.multiply(scaleFactor);\r\n        }\r\n        this.cssObject.visible = obj.visible;\r\n    }\r\n    /**\r\n     * Disposes WebGL and DOM elements\r\n     */\r\n    dispose() {\r\n        // Cleanup events\r\n        this.removeEventListener('added', this.handleAdded);\r\n        this.removeEventListener('removed', this.handleRemoved);\r\n        // Cleanup DOM\r\n        this.domElement.remove();\r\n        // Cleanup WebGL\r\n        this.geometry.dispose();\r\n        this.material.dispose();\r\n    }\r\n}\r\n","//uses a modified version of https://github.com/CodyJasonBennett/three-dom-elements\r\nimport { DOMContext } from './DOMContext';\r\nimport { DOMElement } from './DOMElement';\r\nexport const component = AFRAME.registerComponent('websurface', {\r\n    schema: {\r\n        url: { default: 'https://aframe.io' },\r\n        width: { default: 1 },\r\n        height: { default: 0.75 },\r\n        isInteractable: { default: true },\r\n        frameSkips: { default: 1 },\r\n        autoSceneStyling: { default: true },\r\n    },\r\n    init: function () {\r\n        const el = this.el;\r\n        const data = this.data;\r\n        if (data.autoSceneStyling == true) {\r\n            el.sceneEl.style.position = 'absolute';\r\n            el.sceneEl.style.zIndex = '2';\r\n        }\r\n        if (data.isInteractable == true) {\r\n            data.mouseHasLeftScreen = true;\r\n            //geometry for click detection\r\n            el.setAttribute('geometry', `primitive:plane; width:${data.width}; height:${data.height};`);\r\n            el.addEventListener('click', function () {\r\n                if (data.mouseHasLeftScreen == false)\r\n                    return;\r\n                document.exitPointerLock();\r\n                el.sceneEl.style.zIndex = -2;\r\n                data.mouseHasLeftScreen = false;\r\n            });\r\n            el.addEventListener('mouseleave', function () {\r\n                data.mouseHasLeftScreen = true;\r\n            });\r\n        }\r\n        el.addEventListener('cam-loaded', function () {\r\n            const iframe = document.createElement('iframe');\r\n            iframe.setAttribute('src', data.url);\r\n            iframe.style.border = 'none';\r\n            const camera = el.sceneEl.camera;\r\n            const context = new DOMContext(camera, el);\r\n            context.setSize(window.innerWidth, window.innerHeight);\r\n            document.body.appendChild(context.domElement);\r\n            const element = new DOMElement(context, iframe, data.width, data.height);\r\n            el.object3D.add(element);\r\n            if (data.isInteractable == true) {\r\n                const div = document.createElement('div');\r\n                div.style.position = 'fixed';\r\n                div.style.top = '0';\r\n                div.style.width = '100%';\r\n                div.style.height = '100%';\r\n                div.style.zIndex = '-1';\r\n                context.domElement.appendChild(div);\r\n                div.addEventListener('click', function () {\r\n                    el.sceneEl.style.zIndex = 2;\r\n                });\r\n            }\r\n            this.websurface_iframe = iframe;\r\n            data.context = context;\r\n            data.element = element;\r\n            window.addEventListener('resize', () => {\r\n                context.setSize(window.innerWidth, window.innerHeight);\r\n            });\r\n        });\r\n        data.frames = 0;\r\n        data.isCamLoaded = false;\r\n    },\r\n    tick: function () {\r\n        const el = this.el;\r\n        const data = this.data;\r\n        if (data.isCamLoaded == false) {\r\n            const camera = el.sceneEl.camera;\r\n            if (camera) {\r\n                this.el.emit('cam-loaded');\r\n                data.isCamLoaded = true;\r\n            }\r\n            return;\r\n        }\r\n        const context = data.context;\r\n        const element = data.element;\r\n        if (data.frames % data.frameSkips == 0) {\r\n            if (context) {\r\n                context.update();\r\n            }\r\n            if (element) {\r\n                element.update(el.object3D);\r\n            }\r\n        }\r\n        data.frames++;\r\n    },\r\n});\r\n"],"names":["cssFactor","DOMContext","camera","websurfaceEntity","this","enabled","cssRenderer","CSS3DRenderer","domElement","cssCamera","PerspectiveCamera","fov","aspect","near","far","cssScene","Scene","update","bind","setSize","width","height","updateProjectionMatrix","camPos","Vector3","camQuat","Quaternion","_camScale","matrixWorld","decompose","quaternion","copy","position","multiplyScalar","render","DOMElement","context","elementWidth","geometry","PlaneGeometry","material","MeshBasicMaterial","opacity","blending","NoBlending","side","DoubleSide","color","Color","_this","aspectRatio","elementHeight","resizeElement","cssObject","CSS3DObject","scale","cssObjectInitialScale","size","box","Box3","addEventListener","handleAdded","handleRemoved","add","remove","style","setElement","parentNode","removeChild","element","obj","setFromObject","getSize","scaleFactor","oldScaleFactor","set","x","y","z","multiply","visible","dispose","removeEventListener","Mesh","component","AFRAME","registerComponent","schema","url","default","isInteractable","frameSkips","autoSceneStyling","init","el","data","sceneEl","zIndex","mouseHasLeftScreen","setAttribute","document","exitPointerLock","iframe","createElement","border","window","innerWidth","innerHeight","body","appendChild","object3D","div","top","websurface_iframe","frames","isCamLoaded","tick","emit"],"mappings":"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"}